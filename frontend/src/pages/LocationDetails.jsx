// src/pages/LocationDetails.jsx
import { useParams } from 'react-router-dom';
import { useEffect, useState, useCallback } from 'react'; // –î–æ–¥–∞—î–º–æ useCallback
import { MapContainer, TileLayer, Marker } from 'react-leaflet';
import L from 'leaflet';
import { getLocationById, postReview } from '../api/locationApi';
import './LocationDetails.css';

const LocationDetails = () => {
  const { id } = useParams();  // –û—Ç—Ä–∏–º—É—î–º–æ id –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –º–∞—Ä—à—Ä—É—Ç—É
  const [location, setLocation] = useState(null);  // –°—Ç–∞–Ω –¥–ª—è –ª–æ–∫–∞—Ü—ñ—ó
  const [username, setUsername] = useState('');  // –°—Ç–∞–Ω –¥–ª—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const [comment, setComment] = useState('');  // –°—Ç–∞–Ω –¥–ª—è –≤—ñ–¥–≥—É–∫—É
  const [success, setSuccess] = useState(false);  // –°—Ç–∞–Ω –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É
  const [error, setError] = useState('');  // –°—Ç–∞–Ω –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ useCallback, —â–æ–± —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ –∑–º—ñ–Ω—é–≤–∞–ª–∞—Å—å –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É —Ä–µ–Ω–¥–µ—Ä—ñ
  const getLocation = useCallback(async () => {
    try {
      const data = await getLocationById(id);  // –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–∫–∞—Ü—ñ—é –∑–∞ id
      setLocation(data);
    } catch (error) {
      setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é');
    }
  }, [id]);

  useEffect(() => {
    getLocation();  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ª–æ–∫–∞—Ü—ñ—ó –ø—Ä–∏ –∑–º—ñ–Ω—ñ id
  }, [getLocation]); // –¢–µ–ø–µ—Ä getLocation —î –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—é

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!username || !comment) {
      setError('–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è');
      return;
    }

    const result = await postReview(id, { username, comment });

    if (result) {
      setSuccess(true);
      setUsername('');
      setComment('');
      setError('');
      getLocation(); // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–≥—É–∫–∏ –ø—ñ—Å–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
    } else {
      setError('–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫');
    }
  };

  if (!location) return <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>;

  return (
    <div className="location-details">
      <h2>{location.name}</h2>
      <p>{location.description}</p>

      <ul>
        {location.has_ramp && <li>‚úÖ –Ñ –ø–∞–Ω–¥—É—Å</li>}
        {location.has_toilet && <li>üöª –ê–¥–∞–ø—Ç–æ–≤–∞–Ω–∏–π —Ç—É–∞–ª–µ—Ç</li>}
        {location.has_tactile && <li>üë£ –¢–∞–∫—Ç–∏–ª—å–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è</li>}
      </ul>

      <div className="mini-map">
        <MapContainer
          center={[location.latitude, location.longitude]}
          zoom={17}
          style={{ height: '200px', width: '100%' }}
          scrollWheelZoom={false}
        >
          <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
          <Marker
            position={[location.latitude, location.longitude]}
            icon={new L.Icon({
              iconUrl: require('leaflet/dist/images/marker-icon.png'),
              iconSize: [25, 41],
              iconAnchor: [12, 41],
            })}
          />
        </MapContainer>
      </div>

      <h3>–í—ñ–¥–≥—É–∫–∏</h3>
      {location.reviews?.length ? (
        <ul>
          {location.reviews.map((r, i) => (
            <li key={i}>
              <strong>{r.username}</strong>: {r.comment}
            </li>
          ))}
        </ul>
      ) : (
        <p>–©–µ –Ω–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤.</p>
      )}

      <button className="review-btn">–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫</button>
      <h3>–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫</h3>
      <form onSubmit={handleSubmit} className="review-form">
        <input
          type="text"
          placeholder="–í–∞—à–µ —ñ–º‚Äô—è"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
        />
        <textarea
          placeholder="–í–∞—à –≤—ñ–¥–≥—É–∫"
          value={comment}
          onChange={(e) => setComment(e.target.value)}
        ></textarea>
        <button type="submit">–ù–∞–¥—ñ—Å–ª–∞—Ç–∏</button>
        {success && <p className="success-msg">–í—ñ–¥–≥—É–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ ‚úÖ</p>}
        {error && <p className="error-msg">{error}</p>}
      </form>
    </div>
  );
};

export default LocationDetails;
